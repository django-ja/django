# Japanese translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Django-ja <django-ja@googlegroups.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 0.95\n"
"Report-Msgid-Bugs-To: django-ja@googlegroups.com\n"
"POT-Creation-Date: 2012-11-24 14:15\n"
"PO-Revision-Date: 2012-11-24 14:10+0900\n"
"Last-Translator:  Yasushi Masuda <whosaysni@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# cdd5a9a9270c45698e08af2a7ef16b1b
#: ../../forms.txt:3
msgid "Forms, fields, and manipulators"
msgstr ""

# e8faf0968a2a4695bc54a7505632c907
#: ../../forms.txt:5
msgid ""
"Once you've got a chance to play with Django's admin interface, you'll "
"probably wonder if the fantastic form validation framework it uses is "
"available to user code. It is, and this document explains how the framework "
"works."
msgstr ""

# f5b099474ad342eb8eee1ce92dee4b97
#: ../../forms.txt:11
msgid ""
"If all you want to do is present forms for a user to create and/or update a "
"given object, you may be able to use :doc:`generic views <generic_views>`."
msgstr ""

# 0ee6aeaa01954e7b9020268f35bf499a
#: ../../forms.txt:14
msgid ""
"We'll take a top-down approach to examining Django's form validation "
"framework, because much of the time you won't need to use the lower-level "
"APIs. Throughout this document, we'll be working with the following model, a "
"\"place\" object::"
msgstr ""

# 0103a9cbce664dcbb0d25f9919d021f2
#: ../../forms.txt:41
msgid ""
"Defining the above class is enough to create an admin interface to a "
"``Place``, but what if you want to allow public users to submit places?"
msgstr ""

# 273647ecea3f45c9a3fec09b7c12d20a
#: ../../forms.txt:45
msgid "Manipulators"
msgstr ""

# 1f44b9748d7342728c94f1199e50462a
#: ../../forms.txt:47
msgid ""
"The highest-level interface for object creation and modification is the "
"**Manipulator** framework. A manipulator is a utility class tied to a given "
"model that \"knows\" how to create or modify instances of that model and how "
"to validate data for the object. Manipulators come in two flavors: "
"``AddManipulators`` and ``ChangeManipulators``. Functionally they are quite "
"similar, but the former knows how to create new instances of the model, "
"while the latter modifies existing instances. Both types of classes are "
"automatically created when you define a new class::"
msgstr ""

# 5bf1c17ed51d4626b639eb50ad037a17
#: ../../forms.txt:63
msgid "Using the ``AddManipulator``"
msgstr ""

# 3046b355653245d4a1a369cf1458a799
#: ../../forms.txt:65
msgid ""
"We'll start with the ``AddManipulator``.  Here's a very simple view that "
"takes POSTed data from the browser and creates a new ``Place`` object::"
msgstr ""

# 6b2b985b490745d1876b410949e57da3
#: ../../forms.txt:92
msgid ""
"The ``naive_create_place`` example works, but as you probably can tell, this "
"view has a number of problems:"
msgstr ""

# d2c02cfd97e149bb81a5fc84c98eaaef
#: ../../forms.txt:95
msgid ""
"No validation of any sort is performed. If, for example, the ``name`` field "
"isn't given in ``request.POST``, the save step will cause a database error "
"because that field is required. Ugly."
msgstr ""

# 2d20aaca94174dc29be1efd2a91f24c5
#: ../../forms.txt:99
msgid ""
"Even if you *do* perform validation, there's still no way to give that "
"information to the user in any sort of useful way."
msgstr ""

# a0ea55c0ba4d479ca2d00d2016dbed49
#: ../../forms.txt:102
msgid ""
"You'll have to separately create a form (and view) that submits to this "
"page, which is a pain and is redundant."
msgstr ""

# 5d9db95cf1014f84b0f1a810160a6bac
#: ../../forms.txt:105
msgid ""
"Let's dodge these problems momentarily to take a look at how you could "
"create a view with a form that submits to this flawed creation view::"
msgstr ""

# c9e34d7bf6bb45259dab3850010dcd34
#: ../../forms.txt:115
msgid ""
"(This view, as well as all the following ones, has the same imports as in "
"the first example above.)"
msgstr ""

# 231d02b664314872a704d3137cd7e78b
#: ../../forms.txt:118
msgid ""
"The ``forms.FormWrapper`` object is a wrapper that templates can easily deal "
"with to create forms. Here's the ``naive_create_form.html`` template::"
msgstr ""

# 8626d75231894b34b690499a7f950937
#: ../../forms.txt:138
msgid ""
"Before we get back to the problems with these naive set of views, let's go "
"over some salient points of the above template::"
msgstr ""

# ea6eae0c70ea4734806a76e380242f3f
#: ../../forms.txt:154
msgid ""
"By creating a creation form we've solved problem number 3 above, but we "
"still don't have any validation. Let's revise the validation issue by "
"writing a new creation view that takes validation into account::"
msgstr ""

# 966e3c8c582947339ac18caef2010b46
#: ../../forms.txt:171
msgid ""
"In this new version, errors will be found -- ``manipulator."
"get_validation_errors`` handles all the validation for you -- and those "
"errors can be nicely presented on an error page (templated, of course)::"
msgstr ""

# 576cd5df585140eb9d3f7dfb76664e3a
#: ../../forms.txt:188
msgid "Still, this has its own problems:"
msgstr ""

# 77c5cc567cb7450fa0602731dc16046f
#: ../../forms.txt:190
msgid ""
"There's still the issue of creating a separate (redundant) view for the "
"submission form."
msgstr ""

# 54f33b4fe1ac479dbb37be1400034f02
#: ../../forms.txt:193
msgid ""
"Errors, though nicely presented, are on a separate page, so the user will "
"have to use the \"back\" button to fix errors. That's ridiculous and "
"unusable."
msgstr ""

# e9941d20e26a480e8668165dcc2daf9d
#: ../../forms.txt:196
msgid ""
"The best way to deal with these issues is to collapse the two views -- the "
"form and the submission -- into a single view.  This view will be "
"responsible for creating the form, validating POSTed data, and creating the "
"new object (if the data is valid). An added bonus of this approach is that "
"errors and the form will both be available on the same page, so errors with "
"fields can be presented in context."
msgstr ""

# 2e4892ab64734cbbb8a2048958e31759
#: ../../forms.txt:205
msgid ""
"Finally, for the HTTP purists in the audience (and the authorship), this "
"nicely matches the \"true\" meanings of HTTP GET and HTTP POST: GET fetches "
"the form, and POST creates the new object."
msgstr ""

# a27901d77ee84edc969560915c8e1a06
#: ../../forms.txt:209
msgid "Below is the finished view::"
msgstr ""

# 079248f22c9b4ee8ae25be35c817c17c
#: ../../forms.txt:239
msgid "and here's the ``create_form`` template::"
msgstr ""

# fc0ad8a4ca1c42efb2f8e61881371123
#: ../../forms.txt:279
msgid ""
"The second two arguments to ``FormWrapper`` (``new_data`` and ``errors``) "
"deserve some mention."
msgstr ""

# 98914bc5f26645f4bf761a0ca1809b69
#: ../../forms.txt:282
msgid ""
"The first is any \"default\" data to be used as values for the fields. "
"Pulling the data from ``request.POST``, as is done above, makes sure that if "
"there are errors, the values the user put in aren't lost. If you try the "
"above example, you'll see this in action."
msgstr ""

# d0b2d77007ac4bf991fb03e11141082e
#: ../../forms.txt:287
msgid ""
"The second argument is the error list retrieved from ``manipulator."
"get_validation_errors``.  When passed into the ``FormWrapper``, this gives "
"each field an ``errors`` item (which is a list of error messages associated "
"with the field) as well as a ``html_error_list`` item, which is a ``<ul>`` "
"of error messages. The above template uses these error items to display a "
"simple error message next to each field. The error list is saved as an "
"``error_dict`` attribute of the ``FormWrapper`` object."
msgstr ""

# d5da85a3a36d4d58ab2382923295888f
#: ../../forms.txt:296
msgid "Using the ``ChangeManipulator``"
msgstr ""

# 03f039ba574d40149b8c707d16854a67
#: ../../forms.txt:298
msgid ""
"The above has covered using the ``AddManipulator`` to create a new object. "
"What about editing an existing one? It's shockingly similar to creating a "
"new one::"
msgstr ""

# fca1a8708ba34b25a8d5d35d19337049
#: ../../forms.txt:329
msgid "The only real differences are:"
msgstr ""

# 9418badc8d80476aa09d38bab725d3b4
#: ../../forms.txt:331
msgid ""
"We create a ``ChangeManipulator`` instead of an ``AddManipulator``. The "
"argument to a ``ChangeManipulator`` is the ID of the object to be changed. "
"As you can see, the initializer will raise an ``ObjectDoesNotExist`` "
"exception if the ID is invalid."
msgstr ""

# cbb72148efc044a09092a36c4802d30c
#: ../../forms.txt:336
msgid ""
"``ChangeManipulator.original_object`` stores the instance of the object "
"being edited."
msgstr ""

# 90bf5aaaba46422cb410cee3f5a51e0b
#: ../../forms.txt:339
msgid ""
"We set ``new_data`` to the original object's ``__dict__``. This makes sure "
"the form fields contain the current values of the object. ``FormWrapper`` "
"does not modify ``new_data`` in any way, and templates cannot, so this is "
"perfectly safe."
msgstr ""

# f09bfe86b59d48e599c2ddcc66530cbd
#: ../../forms.txt:344
msgid ""
"The above example uses a different template, so create and edit can be "
"\"skinned\" differently if needed, but the form chunk itself is completely "
"identical to the one in the create form above."
msgstr ""

# 4dedfd2b06fc4f41aa109b42cd85e677
#: ../../forms.txt:348
msgid ""
"The astute programmer will notice the add and create functions are nearly "
"identical and could in fact be collapsed into a single view. This is left as "
"an exercise for said programmer."
msgstr ""

# 401c7aa0c0e34b3c93115179a655d970
#: ../../forms.txt:352
msgid ""
"(However, the even-more-astute programmer will take heed of the note at the "
"top of this document and check out the :doc:`generic views <generic_views>` "
"documentation if all she wishes to do is this type of simple create/update.)"
msgstr ""

# 160a7f670ea0458f852846425971a842
#: ../../forms.txt:357
msgid "Custom forms and manipulators"
msgstr ""

# a8e9a47a35a6402cb2aed3cc194adf84
#: ../../forms.txt:359
msgid ""
"All the above is fine and dandy if you just want to use the automatically "
"created manipulators. But the coolness doesn't end there: You can easily "
"create your own custom manipulators for handling custom forms."
msgstr ""

# 104b1ce107d8486ca3dc77863078c1d9
#: ../../forms.txt:363
msgid ""
"Custom manipulators are pretty simple. Here's a manipulator that you might "
"use for a \"contact\" form on a website::"
msgstr ""

# af40f86d3e7e479db23cc0be4c11e0fb
#: ../../forms.txt:384
msgid ""
"A certain similarity to Django's models should be apparent. The only "
"required method of a custom manipulator is ``__init__`` which must define "
"the fields present in the manipulator.  See the ``django.forms`` module for "
"all the form fields provided by Django."
msgstr ""

# bb4dde16b4f34c29b963166e6c31ac75
#: ../../forms.txt:389
msgid ""
"You use this custom manipulator exactly as you would use an auto-generated "
"one. Here's a simple function that might drive the above form::"
msgstr ""

# ddd9ec5c766d4766b5b55665e087a33b
#: ../../forms.txt:409
msgid "``FileField`` and ``ImageField`` special cases"
msgstr ""

# a6b05b9089c3492c95fbe37c625be1c4
#: ../../forms.txt:411
msgid ""
"Dealing with ``FileField`` and ``ImageField`` objects is a little more "
"complicated."
msgstr ""

# 4bce047ba6014158bb597e6f76e760d2
#: ../../forms.txt:414
msgid ""
"First, you'll need to make sure that your ``<form>`` element correctly "
"defines the ``enctype`` as ``\"multipart/form-data\"``, in order to upload "
"files::"
msgstr ""

# c98e8f6189b9422e8ff2043f21851738
#: ../../forms.txt:419
msgid ""
"Next, you'll need to treat the field in the template slightly differently. A "
"``FileField`` or ``ImageField`` is represented by *two* HTML form elements."
msgstr ""

# 1e03d0451ba24275867f21473966b499
#: ../../forms.txt:422
msgid "For example, given this field in a model::"
msgstr ""

# 91703179353a49d8a38b072e215a97a7
#: ../../forms.txt:426
msgid "You'd need to display two formfields in the template::"
msgstr ""

# 581343fe6ab2419b95f852a3a909409f
#: ../../forms.txt:430
msgid ""
"The first bit (``{{ form.photo }}``) displays the currently-selected file, "
"while the second (``{{ form.photo_file }}``) actually contains the file "
"upload form field. Thus, at the validation layer you need to check the "
"``photo_file`` key."
msgstr ""

# 48ce3d9cce0447388232b174462376c0
#: ../../forms.txt:435
msgid ""
"Finally, in your view, make sure to access ``request.FILES``, rather than "
"``request.POST``, for the uploaded files. This is necessary because "
"``request.POST`` does not contain file-upload data."
msgstr ""

# fcdace3f236d4acfbb2741ab2cd0a147
#: ../../forms.txt:439
msgid ""
"For example, following the ``new_data`` convention, you might do something "
"like this::"
msgstr ""

# 809edf423b0b429291598e0d4a54073b
#: ../../forms.txt:446
msgid "Validators"
msgstr ""

# 994a515fea234caa82d1ad0f6a192d69
#: ../../forms.txt:448
msgid ""
"One useful feature of manipulators is the automatic validation. Validation "
"is done using a simple validation API: A validator is a callable that raises "
"a ``ValidationError`` if there's something wrong with the data. ``django."
"core.validators`` defines a host of validator functions (see below), but "
"defining your own couldn't be easier::"
msgstr ""

# 3352dc7a84f34f6681578545fce7c273
#: ../../forms.txt:468
msgid ""
"Above, we've added a \"to\" field to the contact form, but required that the "
"\"to\" address end with \"@example.com\" by adding the ``isValidToAddress`` "
"validator to the field's ``validator_list``."
msgstr ""

# 857e96391bfc4cd2967f2fd0b5445222
#: ../../forms.txt:472
msgid ""
"The arguments to a validator function take a little explanation.  "
"``field_data`` is the value of the field in question, and ``all_data`` is a "
"dictionary of all the data being validated."
msgstr ""

# d8bd0bd646bd42cfb63383a87abb028d
#: ../../forms.txt:478
msgid ""
"At the point validators are called all data will still be strings (as "
"``do_html2python`` hasn't been called yet)."
msgstr ""

# 88f0d227225943cd8010aba518b769cf
#: ../../forms.txt:481
msgid ""
"Also, because consistency in user interfaces is important, we strongly urge "
"you to put punctuation at the end of your validation messages."
msgstr ""

# 994be68b80894c88a064f2134d444bc3
#: ../../forms.txt:485
msgid "Ready-made Validators"
msgstr ""

# 53136184b9f74e34a40fd808c339b0fc
#: ../../forms.txt:487
msgid ""
"Writing your own validator is not difficult, but there are some situations "
"that come up over and over again. Django comes with a number of validators "
"that can be used directly in your code. All of these functions and classes "
"reside in ``django/core/validators.py``."
msgstr ""

# c25993a9ea36487eae3685d94ceb6ee2
#: ../../forms.txt:492
msgid ""
"The following validators should all be self-explanatory. Each one provides a "
"check for the given property:"
msgstr ""

# e0a220c2d8ce41dca29c0ee709356e77
#: ../../forms.txt:495
msgid "isAlphaNumeric"
msgstr ""

# 5e1e68c06acb43a9a943640421bcdef9
#: ../../forms.txt:496
msgid "isAlphaNumericURL"
msgstr ""

# 841df2f9688240068bb6954a26faf946
#: ../../forms.txt:497
msgid "isSlug"
msgstr ""

# c8e851924d6d432ba709e2ad94364b46
#: ../../forms.txt:498
msgid "isLowerCase"
msgstr ""

# 815940f69c2841db828d55664a163911
#: ../../forms.txt:499
msgid "isUpperCase"
msgstr ""

# ec283298468d45c6b62fba28248132a6
#: ../../forms.txt:500
msgid "isCommaSeparatedIntegerList"
msgstr ""

# bbf52f4e74804f7e8dadccf17ed82cd9
#: ../../forms.txt:501
msgid "isCommaSeparatedEmailList"
msgstr ""

# d647ebdb101b4fd9be83e703d9d0102d
#: ../../forms.txt:502
msgid "isValidIPAddress4"
msgstr ""

# 3e271d091c7b42dba29bd19ecd7be809
#: ../../forms.txt:503
msgid "isNotEmpty"
msgstr ""

# 9f1b6a59f6d24232a13d4902d0c981e8
#: ../../forms.txt:504
msgid "isOnlyDigits"
msgstr ""

# 9b0cd07e3c06419983ce9e71062d7797
#: ../../forms.txt:505
msgid "isNotOnlyDigits"
msgstr ""

# 2de52adafa3b4c42bb420c507551258e
#: ../../forms.txt:506
msgid "isInteger"
msgstr ""

# 812d417c86c748298a93007549191dfe
#: ../../forms.txt:507
msgid "isOnlyLetters"
msgstr ""

# 2ff54a4e56944c118bea1b0d0b6f857a
#: ../../forms.txt:508
msgid "isValidANSIDate"
msgstr ""

# 924730ff7b5e49349672805522396df0
#: ../../forms.txt:509
msgid "isValidANSITime"
msgstr ""

# 0627386823f94c898abb62a1cdce096b
#: ../../forms.txt:510
msgid "isValidEmail"
msgstr ""

# ca275df614554dbca35af3ddc23c6f7b
#: ../../forms.txt:511
msgid "isValidImage"
msgstr ""

# 179f8cbe2bcc4fc795c7f94c7b89f023
#: ../../forms.txt:512
msgid "isValidImageURL"
msgstr ""

# 50d3d01d29444b37aeed5d73ef6d7dce
#: ../../forms.txt:513
msgid "isValidPhone"
msgstr ""

# 8b7ce72a3f3244da83a99c162e50ebcd
#: ../../forms.txt:514
msgid "isValidQuicktimeVideoURL"
msgstr ""

# b105911356f44c209713b3bb432fa8d9
#: ../../forms.txt:515
msgid "isValidURL"
msgstr ""

# 4dc6bc1f29024d8ea37da1d521933fc6
#: ../../forms.txt:516
msgid "isValidHTML"
msgstr ""

# 1835858623484f43854cb15fe0d0aac4
#: ../../forms.txt:517
msgid "isWellFormedXml"
msgstr ""

# c8a1a931ed104997a0fd377954549813
#: ../../forms.txt:518
msgid "isWellFormedXmlFragment"
msgstr ""

# 3f34ff121bd9454496963363c93563d1
#: ../../forms.txt:519
msgid "isExistingURL"
msgstr ""

# ec92e76b2f3040d68667da06c1512a9b
#: ../../forms.txt:520
msgid "isValidUSState"
msgstr ""

# 8a967c133ace462683ab621412c54917
#: ../../forms.txt:521
msgid "hasNoProfanities"
msgstr ""

# 73ddb269087342a89f608c21ddb8f1f7
#: ../../forms.txt:523
msgid ""
"There are also a group of validators that are slightly more flexible. For "
"these validators, you create a validator instance, passing in the parameters "
"described below. The returned object is a callable that can be used as a "
"validator."
msgstr ""

# 9bf5d930a0a2467b9429f116330f9ea7
#: ../../forms.txt:528
msgid "For example::"
msgstr ""

# f69d6b7187f347e2bf4dcf7c4f7d3400
#: ../../forms.txt:542
msgid ""
"Here, ``validators.IsAPowerOf(...)`` returned something that could be used "
"as a validator (in this case, a check that a number was a power of 2)."
msgstr ""

# 66e0ca6012724b40adfbe31d8a741db6
#: ../../forms.txt:545
msgid ""
"Each of the standard validators that take parameters have an optional final "
"argument (``error_message``) that is the message returned when validation "
"fails. If no message is passed in, a default message is used."
msgstr ""

# 1ceed6f59e9c40199835019d483941c3
#: ../../forms.txt:550
msgid ""
"Takes a field name and the current field is valid if and only if its value "
"matches the contents of the other field."
msgstr ""

# 161a5413de8e46e68100f2a28e6ac97a
#: ../../forms.txt:554
msgid ""
"Takes three parameters: ``other_field``, ``other_value`` and "
"``validator_list``, in that order. If ``other_field`` has a value of "
"``other_vaue``, then the validators in ``validator_list`` are all run "
"against the current field."
msgstr ""

# d21e157ac9524fbc99a98eb1e5486317
#: ../../forms.txt:560
msgid ""
"Takes the name of the other field and this field is only required if the "
"other field has no value."
msgstr ""

# 3e60002f590f4cc5844bb0a8d21b5e52
#: ../../forms.txt:564
msgid ""
"Similar to ``RequiredIfOtherFieldNotGiven``, except that it takes a list of "
"field names and if any one of the supplied fields does not have a value "
"provided, the field being validated is required."
msgstr ""

# 2fefead20bca4dbab2609d5afc6d6a42
#: ../../forms.txt:569
msgid ""
"Each of these validator classes takes a field name and a value (in that "
"order). If the given field does (or does not have, in the latter case) the "
"given value, then the current field being validated is required."
msgstr ""

# 5ce38c4fc88f46e8b902ec656547c688
#: ../../forms.txt:573
msgid ""
"Note that because validators are called before any ``do_html2python()`` "
"functions, the value being compared against is a string. So "
"``RequiredIfOtherFieldEquals('choice', '1')`` is correct, whilst "
"``RequiredIfOtherFieldEquals('choice', 1)`` will never result in the "
"equality test succeeding."
msgstr ""

# 25aef70d901f4aaca15b6dd40c436122
#: ../../forms.txt:580
msgid ""
"Takes a field name and validates that the current field being validated has "
"a value that is less than (or equal to) the other field's value. Again, "
"comparisons are done using strings, so be cautious about using this function "
"to compare data that should be treated as another type. The string \"123\" "
"is less than the string \"2\", for example. If you don't want string "
"comparison here, you will need to write your own validator."
msgstr ""

# 9757e2a51cb04d98bbd391a0f0119b33
#: ../../forms.txt:588
msgid ""
"Takes an integer argument and when called as a validator, checks that the "
"field being validated is a power of the integer."
msgstr ""

# 2ff7bf7c91ab4696a46c9690d2b6708a
#: ../../forms.txt:592
msgid ""
"Takes a maximum number of digits and number of decimal places (in that "
"order) and validates whether the field is a float with less than the maximum "
"number of digits and decimal place."
msgstr ""

# 44b9866197c545949fb99549a74a0dea
#: ../../forms.txt:597
msgid ""
"Takes a regular expression (a string) as a parameter and validates the field "
"value against it."
msgstr ""

# 0776ab5c8b8941fe99359c2aaccc8988
#: ../../forms.txt:601
msgid ""
"Takes a list of validators as a parameter. At validation time, if the field "
"successfully validates against any one of the validators, it passes "
"validation. The validators are tested in the order specified in the original "
"list."
msgstr ""

# 04aa1b9edd2442a7a2af806cef243f1b
#: ../../forms.txt:607
msgid ""
"Used to validate URL fields. Takes a list of MIME types (such as ``text/"
"plain``) at creation time. At validation time, it verifies that the field is "
"indeed a URL and then tries to retrieve the content at the URL. Validation "
"succeeds if the content could be retrieved and it has a content type from "
"the list used to create the validator."
msgstr ""

# 4b8547c46a3a43b5bdbb3bfbfc61a0f6
#: ../../forms.txt:614
msgid ""
"Used to validate an XML document against a Relax NG compact schema. Takes a "
"file path to the location of the schema and an optional root element (which "
"is wrapped around the XML fragment before validation, if supplied). At "
"validation time, the XML fragment is validated against the schema using the "
"executable specified in the ``JING_PATH`` setting (see the :doc:`settings "
"<settings>` document for more details)."
msgstr ""
