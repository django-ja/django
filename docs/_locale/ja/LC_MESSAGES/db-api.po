# Japanese translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Django-ja <django-ja@googlegroups.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 0.95\n"
"Report-Msgid-Bugs-To: django-ja@googlegroups.com\n"
"POT-Creation-Date: 2012-11-24 14:15\n"
"PO-Revision-Date: 2012-11-24 14:09+0900\n"
"Last-Translator:  Yasushi Masuda <whosaysni@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 40fd3fd1c6d346a2b1a849890de5cd34
#: ../../db-api.txt:3
msgid "Database API reference"
msgstr ""

# 37705603464d44f1a466517c5081754f
#: ../../db-api.txt:5
msgid ""
"Once you've created your :doc:`data models <model-api>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains that API."
msgstr ""

# ef678c3a886b49878625a5c62478a74c
#: ../../db-api.txt:9
msgid ""
"Throughout this reference, we'll refer to the following models, which "
"comprise a weblog application::"
msgstr ""

# 40fbef7539da496d8d261878862a9194
#: ../../db-api.txt:37
msgid "Creating objects"
msgstr ""

# 63c94c8dc0444af6846a9ec45bd68027
#: ../../db-api.txt:39
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

# 71a7f26d501e48f9b2a75b64149d7bf8
#: ../../db-api.txt:43
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call ``save()`` to save it to the database."
msgstr ""

# 0148dd1c4fcc4fa0a3b1c41b8c8488c7
#: ../../db-api.txt:46
msgid ""
"You import the model class from wherever it lives on the Python path, as you "
"may expect. (We point this out here because previous Django versions "
"required funky model importing.)"
msgstr ""

# c69b970d68fe47aab385dbda30c2a14d
#: ../../db-api.txt:50
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

# 93d9d3f8fd694a36a8c1a9de1d52bce5
#: ../../db-api.txt:56
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call ``save()``."
msgstr ""

# 63f3457aabe04e3b916647cacc2acbe9
# a0355fe28cda4d27b65ba10024e16bfd
#: ../../db-api.txt:59 ../../db-api.txt:131
msgid "The ``save()`` method has no return value."
msgstr ""

# 7929308f119f4bb3bbed00ef458828e0
#: ../../db-api.txt:61
msgid ""
"To create an object and save it all in one step see the `create`__ method."
msgstr ""

# 7e01ab8ab8744060900064ae1f02fce3
#: ../../db-api.txt:66
msgid "Auto-incrementing primary keys"
msgstr ""

# 43b037bd3e104fa0b4891672979fea0c
#: ../../db-api.txt:68
msgid ""
"If a model has an ``AutoField`` -- an auto-incrementing primary key -- then "
"that auto-incremented value will be calculated and saved as an attribute on "
"your object the first time you call ``save()``."
msgstr ""

# 838eb746cf7e4a388562969cf78a60fa
# 93272312e3244862842fb56aee5b922c
# d4d3494d042c474e9cd3341b43615dbe
# c0d65cd6d1124e849fc6a12bdc0b95ce
# 9f5305bb269343058508da0280aff9ae
# 330a866e45944690ac5c51450573382b
# b0c1adcb260045709fa7c96d0ddcaebd
# bfbbd042284a4492a67051dca3dea55c
# 74449b2e8c144cf188d978aef3ab07fd
# aa797d4d1c8b473f9e297267c91668f4
# f7588901139b40dcb35d119b7c5256aa
# 232da4252196462f866d7746eaaebed0
# 25e4dd9f3cd146b7878dd0f8a47600ca
# bbeca61c2412475bac86f78274a33c25
# 4b4e1a89beb94712a975a6f443f613ac
# 226f3ea927d94218838165fcbac79c7a
# f38577538e6747929fd5f300e7268e47
# 6e6c85c1bd2c4f2d97d51e779d7aeb93
# ff44d99acc3d43c5af76fb834ce47b76
# 65f14145012741adad7640c494b6f28d
# 4a61a070f51349ff8d35ff3570a6ec00
# c067572ee30c49c3b0f10d02d872b606
# 5772e4523393404a81d42be1589bc0a1
# 63fc8e19e1124335a244d843905daa45
# 551aae9d92e64946aeb061a2db7199a4
# 6ce697ce0f7747419fca012c2e13e0c0
# c3b7984aaecc482199a71c75132ec490
# dedfd72ce90b4964a2c2b2d07cff3586
# 217e30f312ca433991c9c0302c05455c
# 35ebecb541844471aaf0c4a7927801d3
# 732e52442bae4030984ddca73bf03888
# f140f1b5442c4f8caab731bc69d9e3fb
#: ../../db-api.txt:72 ../../db-api.txt:93 ../../db-api.txt:189
#: ../../db-api.txt:253 ../../db-api.txt:408 ../../db-api.txt:467
#: ../../db-api.txt:597 ../../db-api.txt:643 ../../db-api.txt:657
#: ../../db-api.txt:786 ../../db-api.txt:809 ../../db-api.txt:874
#: ../../db-api.txt:887 ../../db-api.txt:903 ../../db-api.txt:922
#: ../../db-api.txt:935 ../../db-api.txt:963 ../../db-api.txt:976
#: ../../db-api.txt:992 ../../db-api.txt:1005 ../../db-api.txt:1021
#: ../../db-api.txt:1034 ../../db-api.txt:1052 ../../db-api.txt:1068
#: ../../db-api.txt:1083 ../../db-api.txt:1102 ../../db-api.txt:1351
#: ../../db-api.txt:1399 ../../db-api.txt:1431 ../../db-api.txt:1440
#: ../../db-api.txt:1460 ../../db-api.txt:1475
msgid "Example::"
msgstr ""

# 26ff83d0032645b68e77256d12cbaf77
#: ../../db-api.txt:79
msgid ""
"There's no way to tell what the value of an ID will be before you call ``save"
"()``, because that value is calculated by your database, not by Django."
msgstr ""

# ac1db02f60a447808d57ca51024ae423
#: ../../db-api.txt:82
msgid ""
"(For convenience, each model has an ``AutoField`` named ``id`` by default "
"unless you explicitly specify ``primary_key=True`` on a field. See the :doc:"
"`AutoField documentation <model-api>`.)"
msgstr ""

# 37126b4798a7420fb329e3f48040771e
#: ../../db-api.txt:87
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

# 901443dbf279421ebd2f5f57ee06f260
#: ../../db-api.txt:89
msgid ""
"If a model has an ``AutoField`` but you want to define a new object's ID "
"explicitly when saving, just define it explicitly before saving, rather than "
"relying on the auto-assignment of the ID."
msgstr ""

# 20992a865f784faeb1412140ca2c37ad
#: ../../db-api.txt:100
msgid ""
"If you assign auto-primary-key values manually, make sure not to use an "
"already-existing primary-key value! If you create a new object with an "
"explicit primary-key value that already exists in the database, Django will "
"assume you're changing the existing record rather than creating a new one."
msgstr ""

# e9a1e58d33e34933bd97ddd75600dab5
#: ../../db-api.txt:105
msgid ""
"Given the above ``'Cheddar Talk'`` blog example, this example would override "
"the previous record in the database::"
msgstr ""

# baf7ed53450248e999fb72328e91a6f6
#: ../../db-api.txt:111
msgid ""
"See _`How Django knows to UPDATE vs. INSERT`, below, for the reason this "
"happens."
msgstr ""

# 7ff945d6b864429ab019a05f8403a5f6
#: ../../db-api.txt:114
msgid ""
"Explicitly specifying auto-primary-key values is mostly useful for bulk-"
"saving objects, when you're confident you won't have primary-key collision."
msgstr ""

# 547f65bd511548ce85167ae3030fe96c
#: ../../db-api.txt:118
msgid "Saving changes to objects"
msgstr ""

# 11a45a9d7be64a08a2b6da93ec946b76
#: ../../db-api.txt:120
msgid ""
"To save changes to an object that's already in the database, use ``save()``."
msgstr ""

# 175834d2dff2468599b54b343c1f3562
#: ../../db-api.txt:122
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

# fc2b987761ba4840847daec542d89f73
#: ../../db-api.txt:128
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call ``save()``."
msgstr ""

# d4226ee95dad43bea8edfef195a8f2ec
#: ../../db-api.txt:134
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

# fba7f296cbf54212a5e5927d7bbcc1fc
#: ../../db-api.txt:136
msgid ""
"You may have noticed Django database objects use the same ``save()`` method "
"for creating and changing objects. Django abstracts the need to use "
"``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call ``save()"
"``, Django follows this algorithm:"
msgstr ""

# 099af887975f43319170a61331c1115c
#: ../../db-api.txt:141
msgid ""
"If the object's primary key attribute is set to a value that evaluates to "
"``False`` (such as ``None`` or the empty string), Django executes a "
"``SELECT`` query to determine whether a record with the given primary key "
"already exists."
msgstr ""

# 1f403c0316a0404dba9c06510c8a25f4
#: ../../db-api.txt:145
msgid ""
"If the record with the given primary key does already exist, Django executes "
"an ``UPDATE`` query."
msgstr ""

# 4bc3878a32784467949999abbf38cfa7
#: ../../db-api.txt:147
msgid ""
"If the object's primary key attribute is *not* set, or if it's set but a "
"record doesn't exist, Django executes an ``INSERT``."
msgstr ""

# 8a8cbd10eb5741f198a5a99115256e1d
#: ../../db-api.txt:150
msgid ""
"The one gotcha here is that you should be careful not to specify a primary-"
"key value explicitly when saving new objects, if you cannot guarantee the "
"primary-key value is unused. For more on this nuance, see \"Explicitly "
"specifying auto-primary-key values\" above."
msgstr ""

# fb5e2371f7b24935b2113dac1051795f
#: ../../db-api.txt:156
msgid "Retrieving objects"
msgstr ""

# ae1e3baf44594c2babe4b215d73e6455
#: ../../db-api.txt:158
msgid ""
"To retrieve objects from your database, you construct a ``QuerySet`` via a "
"``Manager`` on your model class."
msgstr ""

# 9e3efb185cf34b9ea391a902d4b415bb
#: ../../db-api.txt:161
msgid ""
"A ``QuerySet`` represents a collection of objects from your database. It can "
"have zero, one or many *filters* -- criteria that narrow down the collection "
"based on given parameters. In SQL terms, a ``QuerySet`` equates to a "
"``SELECT`` statement, and a filter is a limiting clause such as ``WHERE`` or "
"``LIMIT``."
msgstr ""

# 9bc23b699e70412d95289c4315bc970e
#: ../../db-api.txt:166
msgid ""
"You get a ``QuerySet`` by using your model's ``Manager``. Each model has at "
"least one ``Manager``, and it's called ``objects`` by default. Access it "
"directly via the model class, like so::"
msgstr ""

# 077157562b014b71a1c2618ca18979de
#: ../../db-api.txt:174
msgid ""
"(``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations.)"
msgstr ""

# ff3a7395aceb4145803645bee2e425f5
#: ../../db-api.txt:178
msgid ""
"The ``Manager`` is the main source of ``QuerySets`` for a model. It acts as "
"a \"root\" ``QuerySet`` that describes all objects in the model's database "
"table. For example, ``Blog.objects`` is the initial ``QuerySet`` that "
"contains all ``Blog`` objects in the database."
msgstr ""

# 88a784fb45af40c690733b412fcbe94c
#: ../../db-api.txt:184
msgid "Retrieving all objects"
msgstr ""

# 3a3bce02323f4fb4a85c16d6f9ca6725
#: ../../db-api.txt:186
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the ``all()`` method on a ``Manager``."
msgstr ""

# e1843a9a208f4e178e1e880fd2205302
#: ../../db-api.txt:193
msgid ""
"The ``all()`` method returns a ``QuerySet`` of all the objects in the "
"database."
msgstr ""

# d761673ea5f84860991bdf9970445cd3
#: ../../db-api.txt:195
msgid ""
"(If ``Entry.objects`` is a ``QuerySet``, why can't we just do ``Entry."
"objects``? That's because ``Entry.objects``, the root ``QuerySet``, is a "
"special case that cannot be evaluated. The ``all()`` method returns a "
"``QuerySet`` that *can* be evaluated.)"
msgstr ""

# f43613b4afa0495489037537ef46722d
#: ../../db-api.txt:201
msgid "Filtering objects"
msgstr ""

# b81a6151f17f401ca6c927ed4f30c209
#: ../../db-api.txt:203
msgid ""
"The root ``QuerySet`` provided by the ``Manager`` describes all objects in "
"the database table. Usually, though, you'll need to select only a subset of "
"the complete set of objects."
msgstr ""

# 199e7aa305454516bde56177bcaccf04
#: ../../db-api.txt:207
msgid ""
"To create such a subset, you refine the initial ``QuerySet``, adding filter "
"conditions. The two most common ways to refine a ``QuerySet`` are:"
msgstr ""

# 7b54c7ac20b84401ab974b0ba9752ba9
# 1289b395549744cfbc4948b884cf7898
#: ../../db-api.txt:211 ../../db-api.txt:361
msgid ""
"Returns a new ``QuerySet`` containing objects that match the given lookup "
"parameters."
msgstr ""

# 407b3ddd6eec4e0da1e92fa1705a0edd
# 723e140e82104ddd8f1985601cbf0a4b
#: ../../db-api.txt:215 ../../db-api.txt:371
msgid ""
"Returns a new ``QuerySet`` containing objects that do *not* match the given "
"lookup parameters."
msgstr ""

# 8aed37bee7d844f894d8895c6ad193c9
#: ../../db-api.txt:218
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

# 56fce89bdb6149d088f70489f43f7848
#: ../../db-api.txt:221
msgid ""
"For example, to get a ``QuerySet`` of blog entries from the year 2006, use "
"``filter()`` like so::"
msgstr ""

# 9fa879a37a8b431988f13d52372f21bc
#: ../../db-api.txt:226
msgid ""
"(Note we don't have to add an ``all()`` -- ``Entry.objects.all().filter(...)"
"``. That would still work, but you only need ``all()`` when you want all "
"objects from the root ``QuerySet``.)"
msgstr ""

# 649a153bd53b4df3ba393872a33136ec
#: ../../db-api.txt:231
msgid "Chaining filters"
msgstr ""

# 53030ee3b32945c5917f249c30a9d5ee
#: ../../db-api.txt:233
msgid ""
"The result of refining a ``QuerySet`` is itself a ``QuerySet``, so it's "
"possible to chain refinements together. For example::"
msgstr ""

# 71eabf023437485f9cd2f57403b5cbbf
#: ../../db-api.txt:241
msgid ""
"...takes the initial ``QuerySet`` of all entries in the database, adds a "
"filter, then an exclusion, then another filter. The final result is a "
"``QuerySet`` containing all entries with a headline that starts with \"What"
"\", that were published between January 1, 2005, and the current day."
msgstr ""

# d091c271a2d7440b9d3c21ba3b95e5bb
#: ../../db-api.txt:247
msgid "Filtered QuerySets are unique"
msgstr ""

# 5d8d2bc0c7184c45bc7e260d317d6c46
#: ../../db-api.txt:249
msgid ""
"Each time you refine a ``QuerySet``, you get a brand-new ``QuerySet`` that "
"is in no way bound to the previous ``QuerySet``. Each refinement creates a "
"separate and distinct ``QuerySet`` that can be stored, used and reused."
msgstr ""

# 378044805dfd4231ac2e1d661ade422f
#: ../../db-api.txt:259
msgid ""
"These three ``QuerySets`` are separate. The first is a base ``QuerySet`` "
"containing all entries that contain a headline starting with \"What\". The "
"second is a subset of the first, with an additional criteria that excludes "
"records whose ``pub_date`` is greater than now. The third is a subset of the "
"first, with an additional criteria that selects only the records whose "
"``pub_date`` is greater than now. The initial ``QuerySet`` (``q1``) is "
"unaffected by the refinement process."
msgstr ""

# bc6a3521c13a498691357724f8054cf9
#: ../../db-api.txt:268
msgid "QuerySets are lazy"
msgstr ""

# 587f1418e38f47ec9eb5eac6ddbd2458
#: ../../db-api.txt:270
msgid ""
"``QuerySets`` are lazy -- the act of creating a ``QuerySet`` doesn't involve "
"any database activity. You can stack filters together all day long, and "
"Django won't actually run the query until the ``QuerySet`` is *evaluated*."
msgstr ""

# 47c31f73f4b94b5ead39551f07435775
#: ../../db-api.txt:275
msgid "When QuerySets are evaluated"
msgstr ""

# 0ce9fe0c4da74e0ea171a1f207958e8e
#: ../../db-api.txt:277
msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr ""

# ff6e55a954d74543b602f1dde1b655ea
#: ../../db-api.txt:279
msgid ""
"**Iteration.** A ``QuerySet`` is iterable, and it executes its database "
"query the first time you iterate over it. For example, this will print the "
"headline of all entries in the database::"
msgstr ""

# f342a2f024384c589774f5acb72fb895
#: ../../db-api.txt:286
msgid ""
"**Slicing.** As explained in `Limiting QuerySets`_ below, a ``QuerySet`` can "
"be sliced, using Python's array-slicing syntax. Usually slicing a "
"``QuerySet`` returns another (unevaluated )``QuerySet``, but Django will "
"execute the database query if you use the \"step\" parameter of slice syntax."
msgstr ""

# b9f0a6e159374cdeb5cdb6031da009df
#: ../../db-api.txt:292
msgid ""
"**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This "
"is for convenience in the Python interactive interpreter, so you can "
"immediately see your results when using the API interactively."
msgstr ""

# a179d3b49b244ea6a8e675908fe655bf
#: ../../db-api.txt:296
msgid ""
"**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, "
"as you might expect, returns the length of the result list."
msgstr ""

# 15f579aa29be41189f608213fba6a25f
#: ../../db-api.txt:299
msgid ""
"Note: *Don't* use ``len()`` on ``QuerySet``\\s if all you want to do is "
"determine the number of records in the set. It's much more efficient to "
"handle a count at the database level, using SQL's ``SELECT COUNT(*)``, and "
"Django provides a ``count()`` method for precisely this reason. See ``count()"
"`` below."
msgstr ""

# c61f60903fc043209c64befcc880eb00
#: ../../db-api.txt:305
msgid ""
"**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. "
"For example::"
msgstr ""

# 13da629be023471ea83d986155e35209
#: ../../db-api.txt:310
msgid ""
"Be warned, though, that this could have a large memory overhead, because "
"Django will load each element of the list into memory. In contrast, "
"iterating over a ``QuerySet`` will take advantage of your database to load "
"data and instantiate objects only as you need them."
msgstr ""

# 10fa2dd3cf5f468b8079b1ed170fc50a
#: ../../db-api.txt:316
msgid "Limiting QuerySets"
msgstr ""

# b54d7ec3aeb9400fad467922d387f459
#: ../../db-api.txt:318
msgid ""
"Use Python's array-slicing syntax to limit your ``QuerySet`` to a certain "
"number of results. This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` "
"clauses."
msgstr ""

# ddfbd76e8a984b659bf4e778f9a58adc
#: ../../db-api.txt:322
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

# 0af9ce7b90ab49daaab5d5b231d5cbf0
#: ../../db-api.txt:326
msgid "This returns the fifth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

# a53cf90a7e6f49348a1317f8589a3950
#: ../../db-api.txt:330
msgid ""
"Generally, slicing a ``QuerySet`` returns a new ``QuerySet`` -- it doesn't "
"evaluate the query. An exception is if you use the \"step\" parameter of "
"Python slice syntax. For example, this would actually execute the query in "
"order to return a list of every *second* object of the first 10::"
msgstr ""

# 63d648382ff74f30a31d105c732e51e2
#: ../../db-api.txt:337
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use a simple index instead of a slice. For example, this returns "
"the first ``Entry`` in the database, after ordering entries alphabetically "
"by headline::"
msgstr ""

# 99d062dc3cd345e9b6b04d4625504bbb
#: ../../db-api.txt:344
msgid "This is roughly equivalent to::"
msgstr ""

# 746f2002ebeb4b74af7b32f045a5cd3b
#: ../../db-api.txt:348
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria."
msgstr ""

# 3c066ba81bf540048f56dc5067bafa82
#: ../../db-api.txt:352
msgid "QuerySet methods that return new QuerySets"
msgstr ""

# d0f29a931f33452db058d782ec92dd67
#: ../../db-api.txt:354
msgid ""
"Django provides a range of ``QuerySet`` refinement methods that modify "
"either the types of results returned by the ``QuerySet`` or the way its SQL "
"query is executed."
msgstr ""

# 8df6ffaacd2b46ad8546ba4dfcada47e
#: ../../db-api.txt:359
msgid "``filter(**kwargs)``"
msgstr ""

# 83ea6da63c7b46e5b36dd20c57eca790
#: ../../db-api.txt:364
msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement."
msgstr ""

# 3479a458ce5245a7b1587fbf138b22c9
#: ../../db-api.txt:369
msgid "``exclude(**kwargs)``"
msgstr ""

# a9159c10ce7f411cb2f1361818a66bd0
#: ../../db-api.txt:374
msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""

# 3ce7e55a9e1446b4a25c234a661a0dba
#: ../../db-api.txt:378
msgid ""
"This example excludes all entries whose ``pub_date`` is the current date/"
"time AND whose ``headline`` is \"Hello\"::"
msgstr ""

# 3dd63ec0792c46c3b31aaf88cc74ddda
# 47e27ebe673b48d4996df1b9bbc44da2
#: ../../db-api.txt:383 ../../db-api.txt:393
msgid "In SQL terms, that evaluates to::"
msgstr ""

# 232fe471f4054b01bb88029471bf7ba7
#: ../../db-api.txt:388
msgid ""
"This example excludes all entries whose ``pub_date`` is the current date/"
"time OR whose ``headline`` is \"Hello\"::"
msgstr ""

# 30abca9d80de491d8c4ceb46d9b898ab
#: ../../db-api.txt:399
msgid "Note the second example is more restrictive."
msgstr ""

# a54c251ac2594727aa6342399713a29d
#: ../../db-api.txt:402
msgid "``order_by(*fields)``"
msgstr ""

# c3df41b93b0542e293bcd31b3a065932
#: ../../db-api.txt:404
msgid ""
"By default, results returned by a ``QuerySet`` are ordered by the ordering "
"tuple given by the ``ordering`` option in the model's ``Meta``. You can "
"override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""

# 7971131df0a34e2a98e427648302642a
#: ../../db-api.txt:412
msgid ""
"The result above will be ordered by ``pub_date`` descending, then by "
"``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` "
"indicates *descending* order. Ascending order is implied. To order randomly, "
"use ``\"?\"``, like so::"
msgstr ""

# 84648ed136074b20bad8e8ca7825a318
#: ../../db-api.txt:419
msgid ""
"To order by a field in a different table, add the other table's name and a "
"dot, like so::"
msgstr ""

# 27dd5bf76fc8431c9c2606f8e0c88796
#: ../../db-api.txt:424
msgid ""
"There's no way to specify whether ordering should be case sensitive. With "
"respect to case-sensitivity, Django will order results however your database "
"backend normally orders them."
msgstr ""

# a7f7686c57994538bc15b193fc9c87a5
#: ../../db-api.txt:429
msgid "``distinct()``"
msgstr ""

# ee7bf627c3b74531bd5820e0fc25d0c9
#: ../../db-api.txt:431
msgid ""
"Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. "
"This eliminates duplicate rows from the query results."
msgstr ""

# 4a9c6d9e17874449842193f4c36b8b16
#: ../../db-api.txt:434
msgid ""
"By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, "
"this is rarely a problem, because simple queries such as ``Blog.objects.all()"
"`` don't introduce the possibility of duplicate result rows."
msgstr ""

# 68c09a37233a42bb9995802cba71fe61
#: ../../db-api.txt:438
msgid ""
"However, if your query spans multiple tables, it's possible to get duplicate "
"results when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()"
"``."
msgstr ""

# 76e0de51ab7f4c1a96bfb6e7e3a43eaf
#: ../../db-api.txt:442
msgid "``values(*fields)``"
msgstr ""

# 153c185f14724dc0aba916e98f129b57
#: ../../db-api.txt:444
msgid ""
"Returns a ``ValuesQuerySet`` -- a ``QuerySet`` that evaluates to a list of "
"dictionaries instead of model-instance objects."
msgstr ""

# 5046d3a9543b41e3b7cbb8d4a1b87742
#: ../../db-api.txt:447
msgid ""
"Each of those dictionaries represents an object, with the keys corresponding "
"to the attribute names of model objects."
msgstr ""

# 370d396433894d49aaf8eb35a9d6bf03
#: ../../db-api.txt:450
msgid ""
"This example compares the dictionaries of ``values()`` with the normal model "
"objects::"
msgstr ""

# d4fa3db2011d4a2bb585e8049684b183
#: ../../db-api.txt:461
msgid ""
"``values()`` takes optional positional arguments, ``*fields``, which specify "
"field names to which the ``SELECT`` should be limited. If you specify the "
"fields, each dictionary will contain only the field keys/values for the "
"fields you specify. If you don't specify the fields, each dictionary will "
"contain a key and value for every field in the database table."
msgstr ""

# 63f80b95c3664e708b8ab6b04d95c412
#: ../../db-api.txt:474
msgid ""
"A ``ValuesQuerySet`` is useful when you know you're only going to need "
"values from a small number of the available fields and you won't need the "
"functionality of a model instance object. It's more efficient to select only "
"the fields you need to use."
msgstr ""

# e5be4534817649fdb1ed71aa99bfded2
#: ../../db-api.txt:479
msgid ""
"Finally, note a ``ValuesQuerySet`` is a subclass of ``QuerySet``, so it has "
"all methods of ``QuerySet``. You can call ``filter()`` on it, or ``order_by()"
"``, or whatever. Yes, that means these two calls are identical::"
msgstr ""

# 39fd3e43db0841b4a3c00f42bddff5cd
#: ../../db-api.txt:486
msgid ""
"The people who made Django prefer to put all the SQL-affecting methods "
"first, followed (optionally) by any output-affecting methods (such as "
"``values()``), but it doesn't really matter. This is your chance to really "
"flaunt your individualism."
msgstr ""

# 7f46515168994a96bd7c167353f6abeb
#: ../../db-api.txt:492
msgid "``dates(field, kind, order='ASC')``"
msgstr ""

# ae97633f6cd344509c35fb7c47e8c456
#: ../../db-api.txt:494
msgid ""
"Returns a ``DateQuerySet`` -- a ``QuerySet`` that evaluates to a list of "
"``datetime.datetime`` objects representing all available dates of a "
"particular kind within the contents of the ``QuerySet``."
msgstr ""

# ea82a6657fe24be1a15387ba295d223e
#: ../../db-api.txt:498
msgid ""
"``field`` should be the name of a ``DateField`` or ``DateTimeField`` of your "
"model."
msgstr ""

# c12cd86b639a48ea9fbe5db450331a5c
#: ../../db-api.txt:501
msgid ""
"``kind`` should be either ``\"year\"``, ``\"month\"`` or ``\"day\"``. Each "
"``datetime.datetime`` object in the result list is \"truncated\" to the "
"given ``type``."
msgstr ""

# 9afa3c0213fa4e89b2113beb603899ff
#: ../../db-api.txt:505
msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""

# a910649cffa94431b36b344e06ef1098
#: ../../db-api.txt:506
msgid ""
"``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr ""

# d7e65c680df846be938d414ab03929e6
#: ../../db-api.txt:507
msgid ""
"``\"day\"`` returns a list of all distinct year/month/day values for the "
"field."
msgstr ""

# 80087b1ba878484297b1b3f6a0a0151c
#: ../../db-api.txt:509
msgid ""
"``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or "
"``'DESC'``. This specifies how to order the results."
msgstr ""

# 06d1c2bba7264b348a60b2761a8912ac
#: ../../db-api.txt:512
msgid "Examples::"
msgstr ""

# 5fa0688445274abdbac83be36f709542
#: ../../db-api.txt:526
msgid "``select_related()``"
msgstr ""

# dbaa04c2ff7448afa02607a4a7e61876
#: ../../db-api.txt:528
msgid ""
"Returns a ``QuerySet`` that will automatically \"follow\" foreign-key "
"relationships, selecting that additional related-object data when it "
"executes its query. This is a performance booster which results in "
"(sometimes much) larger queries but means later use of foreign-key "
"relationships won't require database queries."
msgstr ""

# 19fc0aacb8e341afbed9a4ca39b39246
#: ../../db-api.txt:534
msgid ""
"The following examples illustrate the difference between plain lookups and "
"``select_related()`` lookups. Here's standard lookup::"
msgstr ""

# 5ca19126e62f494d978be1e8cf1b986d
#: ../../db-api.txt:543
msgid "And here's ``select_related`` lookup::"
msgstr ""

# 9d5dda441246450a96b3ffc781fac013
#: ../../db-api.txt:552
msgid ""
"``select_related()`` follows foreign keys as far as possible. If you have "
"the following models::"
msgstr ""

# 50926d0495a7427a81a21721f0186033
#: ../../db-api.txt:566
msgid ""
"...then a call to ``Book.objects.select_related().get(id=4)`` will cache the "
"related ``Person`` *and* the related ``City``::"
msgstr ""

# f27c88bcec66428fa9ae2a4d13530e4f
#: ../../db-api.txt:578
msgid "``extra(select=None, where=None, params=None, tables=None)``"
msgstr ""

# 0181b13fcd754c5284fdee0ad8451b12
#: ../../db-api.txt:580
msgid ""
"Sometimes, the Django query syntax by itself can't easily express a complex "
"``WHERE`` clause. For these edge cases, Django provides the ``extra()`` "
"``QuerySet`` modifier -- a hook for injecting specific clauses into the SQL "
"generated by a ``QuerySet``."
msgstr ""

# d92f9c04857d40398414b0afc5a519a2
#: ../../db-api.txt:585
msgid ""
"By definition, these extra lookups may not be portable to different database "
"engines (because you're explicitly writing SQL code) and violate the DRY "
"principle, so you should avoid them if possible."
msgstr ""

# 3a956f584c7b4d77918b5ff60cec56aa
#: ../../db-api.txt:589
msgid ""
"Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None "
"of the arguments is required, but you should use at least one of them."
msgstr ""

# a9eae615562d4dc3bb3fa03a9557d749
#: ../../db-api.txt:593
msgid ""
"The ``select`` argument lets you put extra fields in the ``SELECT`` clause. "
"It should be a dictionary mapping attribute names to SQL clauses to use to "
"calculate that attribute."
msgstr ""

# 9addbd1970d54536964f2cde50f08b4b
#: ../../db-api.txt:601
msgid ""
"As a result, each ``Entry`` object will have an extra attribute, "
"``is_recent``, a boolean representing whether the entry's ``pub_date`` is "
"greater than Jan. 1, 2006."
msgstr ""

# ce24a34f8fa546319b758cd0616e99d9
#: ../../db-api.txt:605
msgid ""
"Django inserts the given SQL snippet directly into the ``SELECT`` statement, "
"so the resulting SQL of the above example would be::"
msgstr ""

# 83b6e96bb423417f85b75860ad903f1b
#: ../../db-api.txt:612
msgid ""
"The next example is more advanced; it does a subquery to give each resulting "
"``Blog`` object an ``entry_count`` attribute, an integer count of associated "
"``Entry`` objects::"
msgstr ""

# bcd3acb5137143f28eff74461b0de836
#: ../../db-api.txt:622
msgid ""
"(In this particular case, we're exploiting the fact that the query will "
"already contain the ``blog_blog`` table in its ``FROM`` clause.)"
msgstr ""

# 559e1eebe8a648ec91173dff1bcfd3ed
#: ../../db-api.txt:625
msgid "The resulting SQL of the above example would be::"
msgstr ""

# f9ecdd9a579047bf9742c44154baa73b
#: ../../db-api.txt:630
msgid ""
"Note that the parenthesis required by most database engines around "
"subqueries are not required in Django's ``select`` clauses. Also note that "
"some database backends, such as some MySQL versions, don't support "
"subqueries."
msgstr ""

# 01ea329adcd54097852f83068a938416
#: ../../db-api.txt:636
msgid ""
"You can define explicit SQL ``WHERE`` clauses -- perhaps to perform non-"
"explicit joins -- by using ``where``. You can manually add tables to the SQL "
"``FROM`` clause by using ``tables``."
msgstr ""

# 6cd32223e4394ab0a6de2a0701dc99db
#: ../../db-api.txt:640
msgid ""
"``where`` and ``tables`` both take a list of strings. All ``where`` "
"parameters are \"AND\"ed to any other search criteria."
msgstr ""

# 78524acb482e43b9bb2d471d861fb9f7
#: ../../db-api.txt:647
msgid "...translates (roughly) into the following SQL::"
msgstr ""

# f6aac699809c42888ae658717e228e45
#: ../../db-api.txt:652
msgid ""
"The ``select`` and ``where`` parameters described above may use standard "
"Python database string placeholders -- ``'%s'`` to indicate parameters the "
"database engine should automatically quote. The ``params`` argument is a "
"list of any extra parameters to be substituted."
msgstr ""

# f3800000a5b6418dabc7976ec3110281
#: ../../db-api.txt:661
msgid ""
"Always use ``params`` instead of embedding values directly into ``select`` "
"or ``where`` because ``params`` will ensure values are quoted correctly "
"according to your particular backend. (For example, quotes will be escaped "
"correctly.)"
msgstr ""

# ff156799e4b24626847ed8846b8ff6f0
#: ../../db-api.txt:666
msgid "Bad::"
msgstr ""

# 1e7b1236b5f941d1ba533cdb839097ac
#: ../../db-api.txt:670
msgid "Good::"
msgstr ""

# 3be3947e663147109988fdf48a068f9d
#: ../../db-api.txt:675
msgid "QuerySet methods that do not return QuerySets"
msgstr ""

# 69f9e5b5ee0741cf89b4fe47de5129f1
#: ../../db-api.txt:677
msgid ""
"The following ``QuerySet`` methods evaluate the ``QuerySet`` and return "
"something *other than* a ``QuerySet``."
msgstr ""

# 4d8c6c751a454f62a24c507bfadc632b
#: ../../db-api.txt:680
msgid ""
"These methods do not use a cache (see _`Caching and QuerySets` below). "
"Rather, they query the database each time they're called."
msgstr ""

# b9b1bee184d54b66880a43d115e44c02
#: ../../db-api.txt:684
msgid "``get(**kwargs)``"
msgstr ""

# ea09f687939f4112b16c3f0a68d3373b
#: ../../db-api.txt:686
msgid ""
"Returns the object matching the given lookup parameters, which should be in "
"the format described in `Field lookups`_."
msgstr ""

# f15ed720aa0f4ab1a2109b8f9cb89f19
#: ../../db-api.txt:689
msgid "``get()`` raises ``AssertionError`` if more than one object was found."
msgstr ""

# c5d5356db18a4f73ae691b515f52f36d
#: ../../db-api.txt:691
msgid ""
"``get()`` raises a ``DoesNotExist`` exception if an object wasn't found for "
"the given parameters. The ``DoesNotExist`` exception is an attribute of the "
"model class. Example::"
msgstr ""

# 4e1817e2694745819af962c5e9e3fdec
#: ../../db-api.txt:697
msgid ""
"The ``DoesNotExist`` exception inherits from ``django.core.exceptions."
"ObjectDoesNotExist``, so you can target multiple ``DoesNotExist`` "
"exceptions. Example::"
msgstr ""

# 16b6566d04004b129ec1912829104a59
#: ../../db-api.txt:709
msgid "``create(**kwargs)``"
msgstr ""

# 97fa0d827fa64c82a79f5e4ccf266550
#: ../../db-api.txt:711
msgid ""
"A convenience method for creating an object and saving it all in one step.  "
"Thus::"
msgstr ""

# 30c638706e9244cb8a49261f87d9a008
#: ../../db-api.txt:715
msgid "and::"
msgstr ""

# 8519e1d81b2041cf81eb9119a71948ca
#: ../../db-api.txt:720
msgid "are equivalent."
msgstr ""

# 51cd0148dbc143d781dd2beb11bfc2b1
#: ../../db-api.txt:723
msgid "``get_or_create(**kwargs)``"
msgstr ""

# 77b5446bcc5a4b83ad86a5f1da3385e5
#: ../../db-api.txt:725
msgid ""
"A convenience method for looking up an object with the given kwargs, "
"creating one if necessary."
msgstr ""

# b42834b383354b77a885af7e8e2cec02
#: ../../db-api.txt:728
msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the retrieved "
"or created object and ``created`` is a boolean specifying whether a new "
"object was created."
msgstr ""

# f8e6258b5e5b4c188ca6b42de353a06d
#: ../../db-api.txt:732
msgid ""
"This is meant as a shortcut to boilerplatish code and is mostly useful for "
"data-import scripts. For example::"
msgstr ""

# 97c9e29146f24640beb471c46b0a118d
#: ../../db-api.txt:741
msgid ""
"This pattern gets quite unwieldy as the number of fields in a model goes up. "
"The above example can be rewritten using ``get_or_create()`` like so::"
msgstr ""

# 351bd7ca8c434f57ab07cad5af40721f
#: ../../db-api.txt:747
msgid ""
"Any keyword arguments passed to ``get_or_create()`` -- *except* an optional "
"one called ``defaults`` -- will be used in a ``get()`` call. If an object is "
"found, ``get_or_create()`` returns a tuple of that object and ``False``. If "
"an object is *not* found, ``get_or_create()`` will instantiate and save a "
"new object, returning a tuple of the new object and ``True``. The new object "
"will be created according to this algorithm::"
msgstr ""

# 1b9715e6d8434c41aad342daa5d999d7
#: ../../db-api.txt:760
msgid ""
"In English, that means start with any non-``'defaults'`` keyword argument "
"that doesn't contain a double underscore (which would indicate a non-exact "
"lookup). Then add the contents of ``defaults``, overriding any keys if "
"necessary, and use the result as the keyword arguments to the model class."
msgstr ""

# d17ca7fac1694f5a9d6a14f4b84b2969
#: ../../db-api.txt:765
msgid ""
"If you have a field named ``defaults`` and want to use it as an exact lookup "
"in ``get_or_create()``, just use ``'defaults__exact'``, like so::"
msgstr ""

# 7427a55d73324c1c91b7ff6f22c6af26
#: ../../db-api.txt:770
msgid ""
"Finally, a word on using ``get_or_create()`` in Django views. As mentioned "
"earlier, ``get_or_create()`` is mostly useful in scripts that need to parse "
"data and create new records if existing ones aren't available. But if you "
"need to use ``get_or_create()`` in a view, please make sure to use it only "
"in ``POST`` requests unless you have a good reason not to. ``GET`` requests "
"shouldn't have any effect on data; use ``POST`` whenever a request to a page "
"has a side effect on your data. For more, see `Safe methods`_ in the HTTP "
"spec."
msgstr ""

# ff2fdfebea7e47ddaf24e9585d4cc78f
#: ../../db-api.txt:781
msgid "``count()``"
msgstr ""

# 06d466b87a4a452cbfb7489a23bc2c61
#: ../../db-api.txt:783
msgid ""
"Returns an integer representing the number of objects in the database "
"matching the ``QuerySet``. ``count()`` never raises exceptions."
msgstr ""

# 5b9388a617bd4082834c57cbf151659c
#: ../../db-api.txt:794
msgid ""
"``count()`` performs a ``SELECT COUNT(*)`` behind the scenes, so you should "
"always use ``count()`` rather than loading all of the record into Python "
"objects and calling ``len()`` on the result."
msgstr ""

# fc5ffcaa234f4f8da1712f8cea25c4b6
#: ../../db-api.txt:798
msgid ""
"Depending on which database you're using (e.g. PostgreSQL vs. MySQL), ``count"
"()`` may return a long integer instead of a normal Python integer. This is "
"an underlying implementation quirk that shouldn't pose any real-world "
"problems."
msgstr ""

# 74d187ef98ee4e96a794435ecc0d5ea5
#: ../../db-api.txt:804
msgid "``in_bulk(id_list)``"
msgstr ""

# df579d3ec8974dd4ab7b5991f46ad492
#: ../../db-api.txt:806
msgid ""
"Takes a list of primary-key values and returns a dictionary mapping each "
"primary-key value to an instance of the object with the given ID."
msgstr ""

# db078331afd84bad9245a05ecc3a9404
#: ../../db-api.txt:818
msgid ""
"If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr ""

# 103a26a046f1442f8738dee5f69a22dd
#: ../../db-api.txt:821
msgid "``latest(field_name=None)``"
msgstr ""

# 67b5c6604cd5414b9bbd6f7599353429
#: ../../db-api.txt:823
msgid ""
"Returns the latest object in the table, by date, using the ``field_name`` "
"provided as the date field."
msgstr ""

# a3e8c0b728e34976ba90c844b918b5a8
#: ../../db-api.txt:826
msgid ""
"This example returns the latest ``Entry`` in the table, according to the "
"``pub_date`` field::"
msgstr ""

# 7d9760c2cfef4eadbe6c93604a5df9e5
#: ../../db-api.txt:831
msgid ""
"If your model's ``Meta`` specifies ``get_latest_by``, you can leave off the "
"``field_name`` argument to ``latest()``. Django will use the field specified "
"in ``get_latest_by`` by default."
msgstr ""

# 1a2631d9781a423dad46ab37f67450b2
#: ../../db-api.txt:835
msgid ""
"Like ``get()``, ``latest()`` raises ``DoesNotExist`` if an object doesn't "
"exist with the given parameters."
msgstr ""

# 1470676cf1e74489a08aa6d18affcb8a
#: ../../db-api.txt:838
msgid "Note ``latest()`` exists purely for convenience and readability."
msgstr ""

# e46837bf221a43c09b57ff4b7b2edae9
#: ../../db-api.txt:841
msgid "Field lookups"
msgstr ""

# a606f9a40790481f8987034c61934a98
#: ../../db-api.txt:843
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the ``QuerySet`` methods ``filter()"
"``, ``exclude()`` and ``get()``."
msgstr ""

# dddb7cc755294d43a218b4ef8107d601
#: ../../db-api.txt:847
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

# 81f41126eaa34fb498cd01faeed4def8
#: ../../db-api.txt:852
msgid "translates (roughly) into the following SQL::"
msgstr ""

# a855c57fbaeb4465b2f6c0bbf955e609
#: ../../db-api.txt:858
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

# c522e86fc5b34dc0bcbcab7b2e68914b
#: ../../db-api.txt:864
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

# 5e787d2ab5064810a49b3d2fff550e70
#: ../../db-api.txt:867
msgid "The database API supports the following lookup types:"
msgstr ""

# 95345e460d924544ae2d7177b5350b00
#: ../../db-api.txt:870
msgid "exact"
msgstr ""

# b057f635633a401ea1acd838a9c97fdf
#: ../../db-api.txt:872
msgid "Exact match."
msgstr ""

# e05b18adf8fd4880a4872f69af405361
# 68cc4908d2434b11a20d9c2bf5bd62a5
# 02859b0f879041a0b5271d20549aa60d
# 5b6c3370707a4e23a17f281a198d9aec
# 3cb55f03258943b19c5ae3b127167357
# 81c28fa945e641fc80cd768dd156c93e
# 7f9fab27c56c4b3fa5e30b93d4917a07
# 1096dff63c71497e81cad35785d34e94
# a897c071c06b4156b24f4fee780f4ca0
# 4b3e028b15a940a8a22bb35dc68c456c
# 6e811bccec794bf584cc764bcd9320e6
# dc4a9ca39780460a9e1fa168f71d03a2
# 1edad5cfb5b74964878ae8fcb29edbb6
# 0882dd7ade834125ac3546d116a466e5
# 29a3c4157f5c479aaf3764adcdb867ba
#: ../../db-api.txt:878 ../../db-api.txt:891 ../../db-api.txt:907
#: ../../db-api.txt:926 ../../db-api.txt:939 ../../db-api.txt:967
#: ../../db-api.txt:980 ../../db-api.txt:996 ../../db-api.txt:1009
#: ../../db-api.txt:1025 ../../db-api.txt:1040 ../../db-api.txt:1056
#: ../../db-api.txt:1072 ../../db-api.txt:1087 ../../db-api.txt:1106
msgid "SQL equivalent::"
msgstr ""

# ca437ebd0acb4c72b72cd269df32749f
#: ../../db-api.txt:883
msgid "iexact"
msgstr ""

# f7bee23eb8bc4472a318e40660970b93
#: ../../db-api.txt:885
msgid "Case-insensitive exact match."
msgstr ""

# 7ce6f6462c154719862e2f635e2253ca
#: ../../db-api.txt:895
msgid ""
"Note this will match ``'Beatles Blog'``, ``'beatles blog'``, ``'BeAtLes "
"BLoG'``, etc."
msgstr ""

# ac6746aeaef5464494d168dcf2fe10f6
#: ../../db-api.txt:899
msgid "contains"
msgstr ""

# 65b51cef6f254169ad1aba38b33d2ee8
#: ../../db-api.txt:901
msgid "Case-sensitive containment test."
msgstr ""

# 7370a1a842194458b37b2a6d5603fad6
#: ../../db-api.txt:911
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

# bb19b5c47b66475983ae85cfe216fafc
#: ../../db-api.txt:914
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts "
"like ``icontains`` for SQLite."
msgstr ""

# d16ae2fbc3644f7e97a41a8e751a266d
#: ../../db-api.txt:918
msgid "icontains"
msgstr ""

# cc3f41fe573246a49df087db81f9dc92
#: ../../db-api.txt:920
msgid "Case-insensitive containment test."
msgstr ""

# 4b93944116d24ee08b076f4972b8aaba
#: ../../db-api.txt:931
msgid "gt"
msgstr ""

# c49e84b904d046dc8de5a6a9dc557bba
#: ../../db-api.txt:933
msgid "Greater than."
msgstr ""

# f7ef8d8eb4874389a5172e256c8bd30c
#: ../../db-api.txt:944
msgid "gte"
msgstr ""

# 391b3e0c793e497380aeffa861df1706
#: ../../db-api.txt:946
msgid "Greater than or equal to."
msgstr ""

# fdba8be9aa184a4dbf2177a209e48aa8
#: ../../db-api.txt:949
msgid "lt"
msgstr ""

# 6e34d12bca78421da8980c3955712bea
#: ../../db-api.txt:951
msgid "Less than."
msgstr ""

# 91be289837b049a3b7385793fa14fb7c
#: ../../db-api.txt:954
msgid "lte"
msgstr ""

# 38acddf4f97542399deec922f0a05ce3
#: ../../db-api.txt:956
msgid "Less than or equal to."
msgstr ""

# d7c36880487c4999b51aacc5b87cba48
#: ../../db-api.txt:959
msgid "in"
msgstr ""

# 08cd693ed1e44ff18eaf811838bb6364
#: ../../db-api.txt:961
msgid "In a given list."
msgstr ""

# 25f53e654bcc4d3e9d4b09821ac9ad2d
#: ../../db-api.txt:972
msgid "startswith"
msgstr ""

# b22d12870ffa4370801532bada5b13df
#: ../../db-api.txt:974
msgid "Case-sensitive starts-with."
msgstr ""

# 6f01bd15f92648499395711c44f43b87
#: ../../db-api.txt:984
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` "
"acts like ``istartswith`` for SQLite."
msgstr ""

# f4f4eb1c56ff465b9862abe8568a8912
#: ../../db-api.txt:988
msgid "istartswith"
msgstr ""

# 9f81c87bc05b4c4ba12c8017ea2859e8
#: ../../db-api.txt:990
msgid "Case-insensitive starts-with."
msgstr ""

# e463e4027d124d53b14d76548d318b6e
#: ../../db-api.txt:1001
msgid "endswith"
msgstr ""

# b80cd2d24f3c40d9886e2d153d40b2b2
#: ../../db-api.txt:1003
msgid "Case-sensitive ends-with."
msgstr ""

# 28f2ba54723a40f1b7b20d9e5cdfcbd1
#: ../../db-api.txt:1013
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts "
"like ``iendswith`` for SQLite."
msgstr ""

# 8d5912b03b284c51bf806800d39f4c09
#: ../../db-api.txt:1017
msgid "iendswith"
msgstr ""

# 3184b6ebe783489d87137280dbe88c20
#: ../../db-api.txt:1019
msgid "Case-insensitive ends-with."
msgstr ""

# d04f3bb01f5e45d5ae6b0f6495ae06cd
#: ../../db-api.txt:1030
msgid "range"
msgstr ""

# 55888dd48c794ec38b2dd8b1e5517790
#: ../../db-api.txt:1032
msgid "Range test (inclusive)."
msgstr ""

# 8252df8b024c471c89c6fa3d4ec49091
#: ../../db-api.txt:1044
msgid ""
"You can use ``range`` anywhere you can use ``BETWEEN`` in SQL -- for dates, "
"numbers and even characters."
msgstr ""

# 8a8cfc4ae645492f8f7c652b55061a84
#: ../../db-api.txt:1048
msgid "year"
msgstr ""

# 0e04c0537594407ca650ca70fd9c392d
#: ../../db-api.txt:1050
msgid "For date/datetime fields, exact year match. Takes a four-digit year."
msgstr ""

# 7e1adb27155846789197df4fd6be0d3f
# b3826cadd23b4251add795fd997a56bf
# 624e170008824d0fa4f66fef1f74dbe6
#: ../../db-api.txt:1060 ../../db-api.txt:1076 ../../db-api.txt:1091
msgid "(The exact SQL syntax varies for each database engine.)"
msgstr ""

# 057c2cc53c784cbf98a38072d19be655
#: ../../db-api.txt:1063
msgid "month"
msgstr ""

# 0e3dadc41caf4d288c40f78da807f149
#: ../../db-api.txt:1065
msgid ""
"For date/datetime fields, exact month match. Takes an integer 1 (January) "
"through 12 (December)."
msgstr ""

# 0d56f53a56c04bc8ac8a64bad43aff03
#: ../../db-api.txt:1079
msgid "day"
msgstr ""

# efcc5656d6d74c3e8da2ce7883036679
#: ../../db-api.txt:1081
msgid "For date/datetime fields, exact day match."
msgstr ""

# c382397f0cac49f5b2fe81876ef4a83d
#: ../../db-api.txt:1093
msgid ""
"Note this will match any record with a pub_date on the third day of the "
"month, such as January 3, July 3, etc."
msgstr ""

# be1c2f9ad5e643fb9d336bdf43a0097b
#: ../../db-api.txt:1097
msgid "isnull"
msgstr ""

# d651008e059944ddad7368ea7f32254f
#: ../../db-api.txt:1099
msgid ""
"``NULL`` or ``IS NOT NULL`` match. Takes either ``True`` or ``False``, which "
"correspond to ``IS NULL`` and ``IS NOT NULL``, respectively."
msgstr ""

# a1d2531180004a1493c87b0c370f486b
#: ../../db-api.txt:1111
msgid "search"
msgstr ""

# 3f310304667545d88e86ec1e3291144a
#: ../../db-api.txt:1113
msgid ""
"A boolean full-text search, taking advantage of full-text indexing. This is "
"like ``contains`` but is significantly faster due to full-text indexing."
msgstr ""

# a782d5adcf0c4ad492ecac6a597ccc6f
#: ../../db-api.txt:1116
msgid ""
"Note this is only available in MySQL and requires direct manipulation of the "
"database to add the full-text index."
msgstr ""

# 2075f10befe64d50af34804bfa89048b
#: ../../db-api.txt:1120
msgid "Default lookups are exact"
msgstr ""

# 25c8f52b270f40f6987a10ae52cadec8
#: ../../db-api.txt:1122
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

# 64f6979aabe747c790d415fb0c168857
#: ../../db-api.txt:1125
msgid "For example, the following two statements are equivalent::"
msgstr ""

# ed59c1ef81d34d618c45bee0a323e167
#: ../../db-api.txt:1130
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

# 8598eb8a1dc34190aff760fd26bc743d
#: ../../db-api.txt:1133
msgid "The pk lookup shortcut"
msgstr ""

# 9b4e28fd20fa489da6f74ba650ca81f4
#: ../../db-api.txt:1135
msgid ""
"For convenience, Django provides a ``pk`` lookup type, which stands for "
"\"primary_key\". This is shorthand for \"an exact lookup on the primary-key."
"\""
msgstr ""

# 02013b340cea4304b977542c83bae340
#: ../../db-api.txt:1138
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""

# 4646d5055a9a4c5ca61a2275910e06a0
#: ../../db-api.txt:1145
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

# 3d5b91038e894e1399e5f5d4eb5a13e5
#: ../../db-api.txt:1153
msgid "Lookups that span relationships"
msgstr ""

# 47dade1437ef4ed8a9dfa405c1e5a54f
#: ../../db-api.txt:1155
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

# d7e800be780a4a4b9f4fe8f3ebf6893e
#: ../../db-api.txt:1161
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

# 8fdebcfc911a490abe7dd8db9a63c6f2
#: ../../db-api.txt:1166
msgid "This spanning can be as deep as you'd like."
msgstr ""

# 70eeac102b0a4e82b61c7faf191ba1d1
#: ../../db-api.txt:1168
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

# 71918560f152419a8a3926a6f668deee
#: ../../db-api.txt:1171
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

# 1b7cc12f0da6427fb1dd741d45c1bd86
#: ../../db-api.txt:1177
msgid "Escaping parenthesis and underscores in LIKE statements"
msgstr ""

# 007ca34bd7e945bf8d24a5c08b0a8461
#: ../../db-api.txt:1179
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""

# cee56cca18b5459a877fb8230aec2dc8
#: ../../db-api.txt:1186
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

# e45542b534e141d0ab09beb2a4b1371c
#: ../../db-api.txt:1192
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this::"
msgstr ""

# cd50d1d6853445aa9d38952ed70a22b7
#: ../../db-api.txt:1197
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""

# 541513b322804945a0c74202d7fb7c23
#: ../../db-api.txt:1201
msgid "Caching and QuerySets"
msgstr ""

# 1b6f3f4b19b748e4aa817786d788530f
#: ../../db-api.txt:1203
msgid ""
"Each ``QuerySet`` contains a cache, to minimize database access. It's "
"important to understand how it works, in order to write the most efficient "
"code."
msgstr ""

# 13278b23c4d6437ea7095861d3c7d76e
#: ../../db-api.txt:1206
msgid ""
"In a newly created ``QuerySet``, the cache is empty. The first time a "
"``QuerySet`` is evaluated -- and, hence, a database query happens -- Django "
"saves the query results in the ``QuerySet``'s cache and returns the results "
"that have been explicitly requested (e.g., the next element, if the "
"``QuerySet`` is being iterated over). Subsequent evaluations of the "
"``QuerySet`` reuse the cached results."
msgstr ""

# 4421c2d7273642d288da1398ea1c08cb
#: ../../db-api.txt:1213
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your ``QuerySet``\\s correctly. For example, the following will create two "
"``QuerySet``\\s, evaluate them, and throw them away::"
msgstr ""

# 555f86dc0ce44017910afc38cb1f522b
#: ../../db-api.txt:1220
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

# 257574bc3ffa43c3944e1858ecab5828
#: ../../db-api.txt:1225
msgid "To avoid this problem, simply save the ``QuerySet`` and reuse it::"
msgstr ""

# 614360cc58a541b59e284e885e29bc3e
#: ../../db-api.txt:1232
msgid "Comparing objects"
msgstr ""

# 7cfb7c6d5de44c1491b2c09f2a5d3def
#: ../../db-api.txt:1234
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

# edc8c5e0cee545b78b564ea524383270
#: ../../db-api.txt:1238
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

# 251b4e9bd41e404fb38351de300f39d0
#: ../../db-api.txt:1243
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

# b62a03ec3c7245488caaa8527c218124
#: ../../db-api.txt:1251
msgid "Complex lookups with Q objects"
msgstr ""

# 9fe51c72e96f407d8f0e348749271086
#: ../../db-api.txt:1253
msgid ""
"Keyword argument queries -- in ``filter()``, etc. -- are \"AND\"ed together. "
"If you need to execute more complex queries (for example, queries with "
"``OR`` statements), you can use ``Q`` objects."
msgstr ""

# 33d7991555054dd3939ba68827138efe
#: ../../db-api.txt:1257
msgid ""
"A ``Q`` object (``django.db.models.Q``) is an object used to encapsulate a "
"collection of keyword arguments. These keyword arguments are specified as in "
"\"Field lookups\" above."
msgstr ""

# ef9c344ebd054c19a92b3e846d9c61cc
#: ../../db-api.txt:1261
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

# ced41390c3b64450b3253cc9a14e7db3
#: ../../db-api.txt:1265
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

# a4ff6aa0339d470c84fff624a0a71cef
#: ../../db-api.txt:1268
msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

# 43d513cbb9e8415c8b2c0a882e7a099d
#: ../../db-api.txt:1273
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

# a0fe0d65e6a849daa1f92c0843ecbc71
#: ../../db-api.txt:1277
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators. You can also use parenthetical "
"grouping."
msgstr ""

# eb4f5775ccb94ff6ae25bfc78b0ddfb5
#: ../../db-api.txt:1280
msgid ""
"Each lookup function that takes keyword-arguments (e.g. ``filter()``, "
"``exclude()``, ``get()``) can also be passed one or more ``Q`` objects as "
"positional (not-named) arguments. If you provide multiple ``Q`` object "
"arguments to a lookup function, the arguments will be \"AND\"ed together. "
"For example::"
msgstr ""

# 32cd98a5abf24ff4917787e351ead1a8
#: ../../db-api.txt:1291
msgid "... roughly translates into the SQL::"
msgstr ""

# 06609bae40874899bdb9c7c377ab7224
#: ../../db-api.txt:1296
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""

# b1aac9f220c040629452b38309b8eb41
#: ../../db-api.txt:1305
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

# 3b4fb8b700d04e08854340115c0514bb
#: ../../db-api.txt:1312
msgid "... would not be valid."
msgstr ""

# ab3234fbae994a6fa609d1e62b6264b4
#: ../../db-api.txt:1314
msgid "See the `OR lookups examples page`_ for more examples."
msgstr ""

# 087603f1093b4231acc9a2303eb44e49
#: ../../db-api.txt:1319
msgid "Related objects"
msgstr ""

# e225b1af878e4d9d8025ca95bfaa167e
#: ../../db-api.txt:1321
msgid ""
"When you define a relationship in a model (i.e., a ``ForeignKey``, "
"``OneToOneField``, or ``ManyToManyField``), instances of that model will "
"have a convenient API to access the related object(s)."
msgstr ""

# 8573a138cdae46f39df99a06e2afeb59
#: ../../db-api.txt:1325
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

# 78c3ac8707a84872ac754857f4e4a8de
#: ../../db-api.txt:1329
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

# 585a299db1804347bd20b723c01e393c
#: ../../db-api.txt:1332
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""

# 116b57920efb4ca29c2595adc07b3079
#: ../../db-api.txt:1337
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

# 90a3f8e77ed9455a8e60cd33603ca7c5
#: ../../db-api.txt:1343
msgid "One-to-many relationships"
msgstr ""

# 738f46119e7f4a6e8b18de5a8889dba6
#: ../../db-api.txt:1346
msgid "Forward"
msgstr ""

# df4b508c04f3403c9e7f769acb44eb95
#: ../../db-api.txt:1348
msgid ""
"If a model has a ``ForeignKey``, instances of that model will have access to "
"the related (foreign) object via a simple attribute of the model."
msgstr ""

# 817fb0103b37461b88e64262cac2f80b
#: ../../db-api.txt:1356
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call ``save()``. "
"Example::"
msgstr ""

# 0df1213ca81147aa997a7ed1b269359f
#: ../../db-api.txt:1364
msgid ""
"If a ``ForeignKey`` field has ``null=True`` set (i.e., it allows ``NULL`` "
"values), you can assign ``None`` to it. Example::"
msgstr ""

# 77a70b30ec86433d971cce59e8059101
#: ../../db-api.txt:1371
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

# 67c411af5be84c03856c5786a25aaea2
#: ../../db-api.txt:1379
msgid ""
"Note that the ``select_related()`` ``QuerySet`` method recursively "
"prepopulates the cache of all one-to-many relationships ahead of time. "
"Example::"
msgstr ""

# 7b77723f2630480299fa4533086073a4
#: ../../db-api.txt:1386
msgid ""
"``select_related()`` is documented in the \"QuerySet methods that return new "
"QuerySets\" section above."
msgstr ""

# 9caf05fe6f6846a0a53b403e41305665
#: ../../db-api.txt:1390
msgid "Backward"
msgstr ""

# 49e20cf17e624dfeb9a70f7eee6bb2c4
#: ../../db-api.txt:1392
msgid ""
"If a model has a ``ForeignKey``, instances of the foreign-key model will "
"have access to a ``Manager`` that returns all instances of the first model. "
"By default, this ``Manager`` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This ``Manager`` returns ``QuerySets``, which "
"can be filtered and manipulated as described in the \"Retrieving objects\" "
"section above."
msgstr ""

# e2a95ae76acf4d3281a3c9a2b8f8b5b5
#: ../../db-api.txt:1408
msgid ""
"You can override the ``FOO_set`` name by setting the ``related_name`` "
"parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` "
"model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, "
"the above example code would look like this::"
msgstr ""

# 6f58c43e8715474a91d2fdc41642c087
#: ../../db-api.txt:1420
msgid ""
"You cannot access a reverse ``ForeignKey`` ``Manager`` from the class; it "
"must be accessed from an instance. Example::"
msgstr ""

# 700bb32c685041dc8fff0c41b15a8693
#: ../../db-api.txt:1425
msgid ""
"In addition to the ``QuerySet`` methods defined in \"Retrieving objects\" "
"above, the ``ForeignKey`` ``Manager`` has these additional methods:"
msgstr ""

# fd7ce87213a14e989af3eba44ccec701
#: ../../db-api.txt:1428
msgid ""
"``add(obj1, obj2, ...)``: Adds the specified model objects to the related "
"object set."
msgstr ""

# 56926e54fcdb40cd86d6332936afa887
#: ../../db-api.txt:1437
msgid ""
"``create(**kwargs)``: Creates a new object, saves it and puts it in the "
"related object set. Returns the newly created object."
msgstr ""

# 46240ebc58fe4d8581763b4de6c4a00c
#: ../../db-api.txt:1446
msgid "This is equivalent to (but much simpler than)::"
msgstr ""

# fdcc2a0a80154c059ef8da6e5000a08d
#: ../../db-api.txt:1452
msgid ""
"Note that there's no need to specify the keyword argument of the model that "
"defines the relationship. In the above example, we don't pass the parameter "
"``blog`` to ``create()``. Django figures out that the new ``Entry`` object's "
"``blog`` field should be set to ``b``."
msgstr ""

# 58b734ed64d74085b53906ffddc4a4b6
#: ../../db-api.txt:1457
msgid ""
"``remove(obj1, obj2, ...)``: Removes the specified model objects from the "
"related object set."
msgstr ""

# ef43b41bed4748da8a0a840f78a904c0
#: ../../db-api.txt:1466
msgid ""
"In order to prevent database inconsistency, this method only exists on "
"``ForeignKey``s where ``null=True``. If the related field can't be set to "
"``None`` (``NULL``), then an object can't be removed from a relation without "
"being added to another. In the above example, removing ``e`` from ``b."
"entry_set()`` is equivalent to doing ``e.blog = None``, and because the "
"``blog`` ``ForeignKey`` doesn't have ``null=True``, this is invalid."
msgstr ""

# 570575ee2b4d4698bfeb2cbf22406bac
#: ../../db-api.txt:1473
msgid "``clear()``: Removes all objects from the related object set."
msgstr ""

# 83df87dd8cc340a684f5ac5b3ad6e780
#: ../../db-api.txt:1480
msgid ""
"Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""

# 0ec2807976644ac880cd3d1654a9766f
#: ../../db-api.txt:1483
msgid ""
"Just like ``remove()``, ``clear()`` is only available on ``ForeignKey``s "
"where ``null=True``."
msgstr ""

# beac3376420a4e0892cd3d28ebb0a5ce
#: ../../db-api.txt:1486
msgid ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. Example::"
msgstr ""

# 639f23b564d646c1a8ef12b7420f1efb
#: ../../db-api.txt:1492
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

# f08ebf6dfee1452d8b4ac091c79c2ff0
#: ../../db-api.txt:1498
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

# 8e2146eafbc8457ea2a5c3a41a149a9d
#: ../../db-api.txt:1503
msgid "Many-to-many relationships"
msgstr ""

# 5e957556e27f48eea8d5d186335fe2db
#: ../../db-api.txt:1505
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works just as a \"backward\" one-to-many relationship. "
"See _Backward above."
msgstr ""

# fc8a837fcbed4c16b6218522901e00b1
#: ../../db-api.txt:1509
msgid ""
"The only difference is in the attribute naming: The model that defines the "
"``ManyToManyField`` uses the attribute name of that field itself, whereas "
"the \"reverse\" model uses the lowercased model name of the original model, "
"plus ``'_set'`` (just like reverse one-to-many relationships)."
msgstr ""

# e2741bb859b74ef79b9d4058e84ec666
#: ../../db-api.txt:1514
msgid "An example makes this easier to understand::"
msgstr ""

# 74c5721ef8b64f91950216f371e985a4
#: ../../db-api.txt:1524
msgid ""
"Like ``ForeignKey``, ``ManyToManyField`` can specify ``related_name``. In "
"the above example, if the ``ManyToManyField`` in ``Entry`` had specified "
"``related_name='entries'``, then each ``Author`` instance would have an "
"``entries`` attribute instead of ``entry_set``."
msgstr ""

# e9c02f48aa804731b857fefad3760fda
#: ../../db-api.txt:1530
msgid "One-to-one relationships"
msgstr ""

# 8fbcfa5244f64293a7620bb085c00793
#: ../../db-api.txt:1532
msgid ""
"The semantics of one-to-one relationships will be changing soon, so we don't "
"recommend you use them."
msgstr ""

# 6649c34d72f64ac8b69f97b49e787235
#: ../../db-api.txt:1536
msgid "How are the backward relationships possible?"
msgstr ""

# 53bdca0feb0141f7b4e4444c711742a2
#: ../../db-api.txt:1538
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

# a04a1b5fca7043feb802d9dfafae124c
#: ../../db-api.txt:1543
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

# b4dcd3ba53ad4b38aa73433fb026d836
#: ../../db-api.txt:1546
msgid ""
"The answer lies in the ``INSTALLED_APPS`` setting. The first time any model "
"is loaded, Django iterates over every model in ``INSTALLED_APPS`` and "
"creates the backward relationships in memory as needed. Essentially, one of "
"the functions of ``INSTALLED_APPS`` is to tell Django the entire model "
"domain."
msgstr ""

# 1489c82feeae42739064c84c54fd01a5
#: ../../db-api.txt:1552
msgid "Queries over related objects"
msgstr ""

# 0fa17cbd7c8a4eac9cd807927b504b0b
#: ../../db-api.txt:1554
msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the the value for a query to match, you "
"may use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

# 1e491b852b984268883e0bc7db7eb4f9
#: ../../db-api.txt:1559
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

# bf4bcd9b36664fb1a68e8b83bae7813c
#: ../../db-api.txt:1567
msgid "Deleting objects"
msgstr ""

# c6a8011f958046b19e4a6a6059ac1087
#: ../../db-api.txt:1569
msgid ""
"The delete method, conveniently, is named ``delete()``. This method "
"immediately deletes the object and has no return value. Example::"
msgstr ""

# 58b90c91672b4aebaecb4211ca5f2dcd
#: ../../db-api.txt:1574
msgid ""
"You can also delete objects in bulk. Every ``QuerySet`` has a ``delete()`` "
"method, which deletes all members of that ``QuerySet``."
msgstr ""

# c66d3702dce74076af3b6f5636647d48
#: ../../db-api.txt:1577
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

# 8e83740aed0d4c7cadd3469f98e20e90
#: ../../db-api.txt:1582
msgid ""
"Note that ``delete()`` is the only ``QuerySet`` method that is not exposed "
"on a ``Manager`` itself. This is a safety mechanism to prevent you from "
"accidentally requesting ``Entry.objects.delete()``, and deleting *all* the "
"entries. If you *do* want to delete all the objects, then you have to "
"explicitly request a complete query set::"
msgstr ""

# 13a4538da5f94c318f4dca70f0f546e3
#: ../../db-api.txt:1591
msgid "Extra instance methods"
msgstr ""

# 4b78dedcb9a641b8b7ac16149bc71bef
#: ../../db-api.txt:1593
msgid ""
"In addition to ``save()``, ``delete()``, a model object might get any or all "
"of the following methods:"
msgstr ""

# 960150cb27df4f8eb09caaaafa84efce
#: ../../db-api.txt:1597
msgid "get_FOO_display()"
msgstr ""

# 24312ff8f74f4ea3a918ba3fe823f338
#: ../../db-api.txt:1599
msgid ""
"For every field that has ``choices`` set, the object will have a "
"``get_FOO_display()`` method, where ``FOO`` is the name of the field. This "
"method returns the \"human-readable\" value of the field. For example, in "
"the following model::"
msgstr ""

# 24f5c7531df046b3ba71fbdd51068b60
#: ../../db-api.txt:1612
msgid ""
"...each ``Person`` instance will have a ``get_gender_display()`` method. "
"Example::"
msgstr ""

# 6ba06edcc3944bbc9c030df044932220
#: ../../db-api.txt:1622
msgid "get_next_by_FOO(\\**kwargs) and get_previous_by_FOO(\\**kwargs)"
msgstr ""

# c697dcd78a4e4b6092cd6735151a6aff
#: ../../db-api.txt:1624
msgid ""
"For every ``DateField`` and ``DateTimeField`` that does not have "
"``null=True``, the object will have ``get_next_by_FOO()`` and "
"``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. "
"This returns the next and previous object with respect to the date field, "
"raising the appropriate ``DoesNotExist`` exception when appropriate."
msgstr ""

# 1a810514766b47199cd4df7792845758
#: ../../db-api.txt:1630
msgid ""
"Both methods accept optional keyword arguments, which should be in the "
"format described in `Field lookups`_ above."
msgstr ""

# 2c517157aaa3424a968051b772df7db4
#: ../../db-api.txt:1633
msgid ""
"Note that in the case of identical date values, these methods will use the "
"ID as a fallback check. This guarantees that no records are skipped or "
"duplicated. For a full example, see the `lookup API sample model`_."
msgstr ""

# bf8e5ec06d55463298cbcba6d88d44c8
#: ../../db-api.txt:1640
msgid "get_FOO_filename()"
msgstr ""

# 8406e6eaebcb42cab1ee0c235d23bc8c
#: ../../db-api.txt:1642
msgid ""
"For every ``FileField``, the object will have a ``get_FOO_filename()`` "
"method, where ``FOO`` is the name of the field. This returns the full "
"filesystem path to the file, according to your ``MEDIA_ROOT`` setting."
msgstr ""

# 42c85afe52a94ae991dd39d650d700c1
#: ../../db-api.txt:1646
msgid ""
"Note that ``ImageField`` is technically a subclass of ``FileField``, so "
"every model with an ``ImageField`` will also get this method."
msgstr ""

# 1388efbaefe248149ff4ee1965e6924e
#: ../../db-api.txt:1650
msgid "get_FOO_url()"
msgstr ""

# 28514ee567a9478fab19c8d584a424a1
#: ../../db-api.txt:1652
msgid ""
"For every ``FileField``, the object will have a ``get_FOO_url()`` method, "
"where ``FOO`` is the name of the field. This returns the full URL to the "
"file, according to your ``MEDIA_URL`` setting. If the value is blank, this "
"method returns an empty string."
msgstr ""

# d715e885946e4e03a553d7bb773499d1
#: ../../db-api.txt:1658
msgid "get_FOO_size()"
msgstr ""

# 21d08c5f16e248a89cb28b42734b17e8
#: ../../db-api.txt:1660
msgid ""
"For every ``FileField``, the object will have a ``get_FOO_size()`` method, "
"where ``FOO`` is the name of the field. This returns the size of the file, "
"in bytes. (Behind the scenes, it uses ``os.path.getsize``.)"
msgstr ""

# 144d195913fc4f72aa3e88e15d398311
#: ../../db-api.txt:1665
msgid "save_FOO_file(filename, raw_contents)"
msgstr ""

# 7f015151ba2f42f3ba27d03d6532a3c1
#: ../../db-api.txt:1667
msgid ""
"For every ``FileField``, the object will have a ``save_FOO_file()`` method, "
"where ``FOO`` is the name of the field. This saves the given file to the "
"filesystem, using the given filename. If a file with the given filename "
"already exists, Django adds an underscore to the end of the filename (but "
"before the extension) until the filename is available."
msgstr ""

# 0880462c47664faf9abad6bf94ed958f
#: ../../db-api.txt:1674
msgid "get_FOO_height() and get_FOO_width()"
msgstr ""

# 4c5d8bc22264447da9a93d7ede177875
#: ../../db-api.txt:1676
msgid ""
"For every ``ImageField``, the object will have ``get_FOO_height()`` and "
"``get_FOO_width()`` methods, where ``FOO`` is the name of the field. This "
"returns the height (or width) of the image, as an integer, in pixels."
msgstr ""

# b21209ea201644b48fd9c3b0fd69e228
#: ../../db-api.txt:1681
msgid "Falling back to raw SQL"
msgstr ""

# 857ad16eae6c4795b48dc4204a369778
#: ../../db-api.txt:1683
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back into raw-SQL statement "
"mode."
msgstr ""

# 07fccc3cf7474cd882ad7552dd90324a
#: ../../db-api.txt:1687
msgid ""
"The preferred way to do this is by giving your model custom methods or "
"custom manager methods that execute queries. Although there's nothing in "
"Django that *requires* database queries to live in the model layer, this "
"approach keeps all your data-access logic in one place, which is smart from "
"an code-organization standpoint. For instructions, see :doc:`Executing "
"custom SQL <model-api>`."
msgstr ""

# d63940287d9c4506bf939cc9169e6fb4
#: ../../db-api.txt:1693
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""
